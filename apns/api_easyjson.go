// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apns

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = ErrorReason(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns(l, v)
}
func easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns1(in *jlexer.Lexer, out *Payload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aps":
			(out.APS).UnmarshalEasyJSON(in)
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns1(out *jwriter.Writer, in Payload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aps\":"
		out.RawString(prefix[1:])
		(in.APS).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns1(l, v)
}
func easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns2(in *jlexer.Lexer, out *Alert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "title-loc-key":
			out.TitleLocKey = string(in.String())
		case "title-loc-args":
			if in.IsNull() {
				in.Skip()
				out.TitleLocArgs = nil
			} else {
				in.Delim('[')
				if out.TitleLocArgs == nil {
					if !in.IsDelim(']') {
						out.TitleLocArgs = make([]string, 0, 4)
					} else {
						out.TitleLocArgs = []string{}
					}
				} else {
					out.TitleLocArgs = (out.TitleLocArgs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.TitleLocArgs = append(out.TitleLocArgs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action-loc-key":
			out.ActionLocKey = string(in.String())
		case "loc-key":
			out.LocKey = string(in.String())
		case "loc-args":
			if in.IsNull() {
				in.Skip()
				out.LocArgs = nil
			} else {
				in.Delim('[')
				if out.LocArgs == nil {
					if !in.IsDelim(']') {
						out.LocArgs = make([]string, 0, 4)
					} else {
						out.LocArgs = []string{}
					}
				} else {
					out.LocArgs = (out.LocArgs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.LocArgs = append(out.LocArgs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "launch-image":
			out.LaunchImage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns2(out *jwriter.Writer, in Alert) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Body))
	}
	if in.TitleLocKey != "" {
		const prefix string = ",\"title-loc-key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleLocKey))
	}
	if len(in.TitleLocArgs) != 0 {
		const prefix string = ",\"title-loc-args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.TitleLocArgs {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if in.ActionLocKey != "" {
		const prefix string = ",\"action-loc-key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActionLocKey))
	}
	if in.LocKey != "" {
		const prefix string = ",\"loc-key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocKey))
	}
	if len(in.LocArgs) != 0 {
		const prefix string = ",\"loc-args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.LocArgs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.LaunchImage != "" {
		const prefix string = ",\"launch-image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LaunchImage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Alert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Alert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Alert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Alert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns2(l, v)
}
func easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns3(in *jlexer.Lexer, out *APS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alert":
			(out.Alert).UnmarshalEasyJSON(in)
		case "badge":
			out.Badge = int(in.Int())
		case "sound":
			out.Sound = string(in.String())
		case "content-available":
			out.ContentAvailable = int(in.Int())
		case "category":
			out.Category = string(in.String())
		case "thread-id":
			out.ThreadID = string(in.String())
		case "mutable-content":
			out.MutableContent = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns3(out *jwriter.Writer, in APS) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"alert\":"
		first = false
		out.RawString(prefix[1:])
		(in.Alert).MarshalEasyJSON(out)
	}
	if in.Badge != 0 {
		const prefix string = ",\"badge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Badge))
	}
	if in.Sound != "" {
		const prefix string = ",\"sound\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sound))
	}
	if in.ContentAvailable != 0 {
		const prefix string = ",\"content-available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContentAvailable))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	if in.ThreadID != "" {
		const prefix string = ",\"thread-id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThreadID))
	}
	if in.MutableContent != 0 {
		const prefix string = ",\"mutable-content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MutableContent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComHumansNetGoApnsApns3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComHumansNetGoApnsApns3(l, v)
}
